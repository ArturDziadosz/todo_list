{"version":3,"sources":["components/Header.js","components/Form.js","components/TD/TDHeader.js","components/TD/TDElement.js","components/TD/TDPagination.js","components/ToDoList.js","components/Footer.js","App.js","index.js"],"names":["Header","className","name","Component","Form","props","handleSubmit","e","preventDefault","state","inputValue","handleAtParent","trim","priority","setState","handleChange","target","value","onSubmit","TextField","variant","autoFocus","label","onChange","this","type","Button","color","TDHeader","handleSort","dataset","sort","handleAtParentSort","console","log","activeFilter","prevProps","onClick","data-sort","style","azFilter","zaFilter","ascentPriority","descentPriority","checked","notChecked","TDElement","deleteTask","deleteAreYouSure","index","getAttribute","handleAtParentDelete","handleChangeFinished","handleAtParentIsFinished","handleChangePriority","handleAtParentPriority","task","isFinished","text","data-key","TDPagination","handlePageDown","currentPage","prevState","indexOfLast","tasksPerPage","indexOfFirst","viewedTasks","tdList","slice","handlePageUp","length","indexOfLastTask","Math","min","ToDoList","addTask","filter","newlyAddedTask","localStorage","getItem","storedList","push","setItem","JSON","stringify","parse","unshift","splice","toggleFinishTask","boolean","changePriority","paginationRef","current","changeView","viewedTDList","React","createRef","window","parsedStoredList","a","b","nameA","nameB","priorities","priorityA","priorityB","true","false","map","key","ref","Footer","href","rel","to","smooth","duration","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee4bcc2c.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Header.scss';\n\nclass Header extends Component {\n\n  render() {\n    return (\n      <>\n        <header className={\"container\"} name={\"header\"}>\n          <section className={\"row\"}>\n            <h1 className={\"col-12 header__title\"}>To Do List</h1>\n          </section>\n        </header>\n      </>\n    )\n  }\n}\n\nexport default Header;","import React, {Component} from 'react';\n\nimport './Form.scss';\n\nimport {TextField, Button} from '@material-ui/core';\n\nclass Form extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: \"\",\n      priority: \"Low\"\n    }\n  }\n\n  // submit values with preventing default action, validate input value, pass values to parent element with trimming the input value\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.state.inputValue === \"\") {\n      return null\n    }\n    this.props.handleAtParent(this.state.inputValue.trim(), this.state.priority);\n    this.setState({\n      inputValue: \"\"\n    })\n  }\n\n  // controlling the components\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  };\n\n  render() {\n\n    return (\n      <>\n        <form className={\"row row__form\"} onSubmit={e => this.handleSubmit(e)}>\n          <TextField  className={\"col-8\"} \n                      variant={\"outlined\"}\n                      autoFocus={true}\n                      label={\"Add new task\"}\n                      name={\"inputValue\"}\n                      onChange={e => this.handleChange(e)}\n                      value={this.state.inputValue}\n                      type={\"text\"} />\n          <select className={\"col-2\"} name={\"priority\"} onChange={e => this.handleChange(e)} value={this.state.priority}>\n            <option value={\"Low\"}>Low</option>\n            <option value={\"Medium\"}>Medium</option>\n            <option value={\"High\"}>High</option>\n          </select>\n          <Button className={\"col-2\"} variant={\"contained\"} color={\"primary\"} type={\"submit\"}>\n            <i className=\"fas fa-plus\"></i>\n          </Button>\n        </form>\n      </>\n    )\n  }\n}\n\nexport default Form;","import React, {Component} from 'react';\n\nimport './TDHeader.scss';\n\nclass TDHeader extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeFilter: this.props.activeFilter\n    }\n  }\n\n  // updating state when new props come to show user active filter\n  componentDidUpdate(prevProps) {\n    if (this.props.activeFilter !== prevProps.activeFilter) {\n      this.setState({\n        activeFilter: this.props.activeFilter\n      })\n    }\n  }\n\n  // passing to parent data with active filter\n  handleSort = e => {\n    switch (e.target.dataset.sort) {\n      case \"az\":\n        e.target.dataset.sort = \"za\";\n        this.props.handleAtParentSort(e.target.dataset.sort);\n      break;\n      case \"za\":\n        e.target.dataset.sort = \"az\";\n        this.props.handleAtParentSort(e.target.dataset.sort);\n      break;\n      case \"descent\":\n        e.target.dataset.sort = \"ascent\";\n        this.props.handleAtParentSort(e.target.dataset.sort);\n      break;\n      case \"ascent\":\n        e.target.dataset.sort = \"descent\";\n        this.props.handleAtParentSort(e.target.dataset.sort);\n      break;\n      case \"checked\":\n        e.target.dataset.sort = \"notChecked\";\n        this.props.handleAtParentSort(e.target.dataset.sort);\n      break;\n      case \"notChecked\":\n        e.target.dataset.sort = \"checked\";\n        this.props.handleAtParentSort(e.target.dataset.sort);\n      break;\n      default:\n        console.log(\"switch error\");\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <li className={\"tdList__header\"}>\n          <div className={\"col-8\"}>\n            <p onClick={e => this.handleSort(e)} data-sort={\"za\"}>Task Name</p>\n            <p style={this.state.activeFilter.azFilter ? {\"display\": \"block\"} : {\"display\": \"none\"}}>AZ</p>\n            <p style={this.state.activeFilter.zaFilter ? {\"display\": \"block\"} : {\"display\": \"none\"}}>ZA</p>\n          </div>\n          <div className={\"col-2\"}>\n            <p onClick={e => this.handleSort(e)} data-sort={\"descent\"}>Priority</p>\n            <p style={this.state.activeFilter.ascentPriority ? {\"display\": \"block\"} : {\"display\": \"none\"}}>ascent</p>\n            <p style={this.state.activeFilter.descentPriority ? {\"display\": \"block\"} : {\"display\": \"none\"}}>descent</p>\n          </div>\n          <div className={\"col-2\"}>\n            <p onClick={e => this.handleSort(e)} data-sort={\"notChecked\"}>Done</p>\n            <p style={this.state.activeFilter.checked ? {\"display\": \"block\"} : {\"display\": \"none\"}}>V</p>\n            <p style={this.state.activeFilter.notChecked ? {\"display\": \"block\"} : {\"display\": \"none\"}}>Not</p>\n          </div>\n        </li>\n      </>\n    )\n  }\n}\n\nexport default TDHeader;","import React, {Component} from 'react';\n\nimport './TDElement.scss';\n\nclass TDElement extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: this.props.task.isFinished,\n      priority: this.props.task.priority,\n      deleteAreYouSure: false\n    }\n  }\n\n  // updating state after getting new task or changed task\n  componentDidUpdate(prevProps) {\n    if (this.props.task !== prevProps.task) {\n      this.setState({\n        checked: this.props.task.isFinished,\n        priority: this.props.task.priority\n      })\n    }\n  }\n\n  // passing index of element to parent to delete task, with validation if it's finished\n  deleteTask = e => {\n    if (this.state.checked === false) {\n      if (this.state.deleteAreYouSure === true) {\n        const index = e.target.getAttribute(\"data-key\");\n        this.props.handleAtParentDelete(index);\n      }\n      this.setState({\n        deleteAreYouSure: true\n      })\n    } else {    \n    const index = e.target.getAttribute(\"data-key\");\n    this.props.handleAtParentDelete(index);\n    }\n  }\n\n  // handler for changing the finished status (true, false)\n  handleChangeFinished = e => {\n    const index = e.target.getAttribute(\"data-key\");\n    this.props.handleAtParentIsFinished(index, e.target.checked);\n\n    this.setState({\n      [e.target.name]: e.target.checked,\n      deleteAreYouSure: false\n    })\n  }\n\n  // handler for changing priority\n  handleChangePriority = e => {\n    const index = e.target.getAttribute(\"data-key\");\n    this.props.handleAtParentPriority(index, e.target.value);\n\n    this.setState({\n      [e.target.name]: e.target.value,\n      deleteAreYouSure:false\n    })\n  }\n\n  render() {\n    const {priority, checked, deleteAreYouSure} = this.state;\n\n    return (\n      <>\n        <li className={checked ? \"tdList__element tdList__element--checked\" : \"tdList__element\"} >\n            <p className={\"col-8\"}>{this.props.task.text}</p>\n            <select className={\"col-2\"} name={\"priority\"} data-key={this.props.index} onChange={e => this.handleChangePriority(e)} value={priority}>\n              <option value={\"Low\"}>Low</option>\n              <option value={\"Medium\"}>Medium</option>\n              <option value={\"High\"}>High</option>\n            </select>\n            <input  type={\"checkbox\"} \n                    name={\"checked\"} \n                    onChange={e => this.handleChangeFinished(e)} \n                    data-key={this.props.index}\n                    checked={checked}\n                    className={\"col-2\"}\n                    value={checked}\n            />\n            {deleteAreYouSure ? <p className={\"tdList__element__warning col-10\"}>Still not done, are you sure you want to delete it?</p> : null}\n            <button type={\"button\"}\n                    data-key={this.props.index}\n                    onClick={e => this.deleteTask(e)}\n                    className={\"tdList__element__deleteBtn\"}        \n            >\n                <i className=\"fas fa-trash-alt\" data-key={this.props.index} />\n            </button>\n        </li>\n      </>\n    )\n  }\n}\n\nexport default TDElement;","import React, {Component} from 'react';\n\nimport './TDPagination.scss';\n\nclass TDPagination extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPage: 1,\n      tasksPerPage: 5,\n      tdList: this.props.tdList\n    }\n  }\n\n  // updating state with new list to add current pagination and pass data to parent element\n  componentDidUpdate(prevProps) {\n    if (this.props.tdList !== prevProps.tdList) {\n      this.setState({\n        tdList: this.props.tdList\n      }, () => {\n        const indexOfLast = this.state.currentPage * this.state.tasksPerPage;\n        const indexOfFirst = indexOfLast - this.state.tasksPerPage;\n        const viewedTasks = this.state.tdList.slice(indexOfFirst, indexOfLast);   \n        this.props.handleAtParent(viewedTasks);\n      })\n    }\n  }\n\n  // go to previous page, with validation to not to go to page below first and passing data to parent element\n  handlePageDown = () => {\n    if (this.state.currentPage > \"1\") {\n      this.setState(prevState => ({\n        currentPage: prevState.currentPage -1\n      }), () => {\n        const indexOfLast = this.state.currentPage * this.state.tasksPerPage;\n        const indexOfFirst = indexOfLast - this.state.tasksPerPage;\n        const viewedTasks = this.state.tdList.slice(indexOfFirst, indexOfLast);   \n        this.props.handleAtParent(viewedTasks);\n      })\n    }\n  }\n\n  // go to next page, with validation to not to go to page beyond last and passing data to parent element\n  handlePageUp = () => {\n    if (this.state.currentPage * this.state.tasksPerPage < this.state.tdList.length) {\n      this.setState(prevState => ({\n        currentPage: prevState.currentPage +1\n      }), () => {\n        const indexOfLast = this.state.currentPage * this.state.tasksPerPage;\n        const indexOfFirst = indexOfLast - this.state.tasksPerPage;\n        const viewedTasks = this.state.tdList.slice(indexOfFirst, indexOfLast);   \n        this.props.handleAtParent(viewedTasks);\n      })\n    }\n  }\n\n  // controlling the select component, setting currentPage to first and passing data to parent element\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n      currentPage: 1\n    }, () => {\n      const indexOfLast = this.state.currentPage * this.state.tasksPerPage;\n      const indexOfFirst = indexOfLast - this.state.tasksPerPage;\n      const viewedTasks = this.state.tdList.slice(indexOfFirst, indexOfLast);   \n      this.props.handleAtParent(viewedTasks);\n    })\n  };\n\n  render() {\n    const {currentPage, tasksPerPage, tdList} = this.state;\n\n    const indexOfLast = currentPage * tasksPerPage;\n    const indexOfFirst = indexOfLast - tasksPerPage;\n    const indexOfLastTask = Math.min(indexOfLast, tdList.length);\n\n    return (\n      <>\n        <li className={\"tdList__footer\"}>\n          <p>Rows per page: \n            <select name={\"tasksPerPage\"} onChange={e => this.handleChange(e)} value={tasksPerPage}>\n              <option value={\"5\"}>5</option>\n              <option value={\"10\"}>10</option>\n              <option value={\"15\"}>15</option>\n            </select>\n          </p>\n          <p>{tdList.length === 0 ? indexOfFirst : indexOfFirst+1} - {indexOfLastTask} of {tdList.length}</p>\n          <button onClick={e => this.handlePageDown(e)}>{\"<\"}</button>\n          <button onClick={e => this.handlePageUp(e)}>{\">\"}</button>\n        </li>\n      </>\n    )\n  }\n}\n\nexport default TDPagination;","import React, {Component} from 'react';\n\nimport './ToDoList.scss';\nimport TDHeader from './TD/TDHeader';\nimport TDElement from './TD/TDElement';\nimport TDPagination from './TD/TDPagination';\n\nclass ToDoList extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      tdList: [],\n      filter: {\n        azFilter: false,\n        zaFilter: false,\n        ascentPriority: false,\n        descentPriority: false,\n        checked: false,\n        notChecked: false\n      },\n      viewedTDList: []\n    }\n    this.paginationRef = React.createRef();\n  }\n\n  // loading stored list on loading app\n  componentDidMount() {\n    const storedList = window.localStorage.getItem(\"storedList\");\n    const parsedStoredList = JSON.parse(storedList);\n    \n    if (storedList == null) {\n      return false;\n    } else {\n      this.setState({\n        tdList: parsedStoredList\n      })\n    }\n  }\n\n  // when new props comes in with new task invoking addTask function, with validation of input value\n  componentDidUpdate(prevProps) {\n    if (this.props.newlyAddedTask.inputValue !== prevProps.newlyAddedTask.inputValue) {\n      if (this.props.newlyAddedTask.inputValue !== \"\") {\n        this.addTask();\n      }\n    }\n  }\n\n  // adding new task to list in component state and local storage\n  addTask = () => {\n    // disabling the sorting to add new task on top of the list\n    this.setState({\n      filter: {\n        azFilter: false,\n        zaFilter: false,\n        ascentPriority: false,\n        descentPriority: false,\n        checked: false,\n        notChecked: false\n      }\n    })\n\n    // new task has text, priority and it's not finished by default \n    const task = {\n      text: this.props.newlyAddedTask.inputValue,\n      priority: this.props.newlyAddedTask.priority,\n      isFinished: false\n    };\n\n    // checking if local storage has some data, adding new task and store it in local storage\n    if (localStorage.getItem(\"storedList\") == null) {\n      const storedList = [];\n      storedList.push(task);\n      localStorage.setItem(\"storedList\", JSON.stringify(storedList));\n    } else {\n      const storedList = JSON.parse(localStorage.getItem(\"storedList\"));\n      storedList.unshift(task);\n      localStorage.setItem(\"storedList\", JSON.stringify(storedList));\n    }\n\n    // updating state with updated local storage\n    this.setState({\n      tdList: JSON.parse(localStorage.getItem(\"storedList\"))\n    })\n  }\n\n  // deleting task with splice method and updating state and local storage\n  deleteTask = index => {\n    const storedList = JSON.parse(localStorage.getItem(\"storedList\"));\n    storedList.splice(index,1);\n    this.setState({\n      tdList: storedList\n    })\n    localStorage.setItem(\"storedList\", JSON.stringify(storedList));\n  }\n\n  // toggling the checkbox status with updating state and local storage\n  toggleFinishTask = (index, boolean) => {\n    const storedList = JSON.parse(localStorage.getItem(\"storedList\"));\n    storedList[index].isFinished = boolean;\n    this.setState({\n      tdList: storedList\n    })\n    localStorage.setItem(\"storedList\", JSON.stringify(storedList));\n  }\n\n  // changing the priority of task with updating state and local storage\n  changePriority = (index, priority) => {\n    const storedList = JSON.parse(localStorage.getItem(\"storedList\"));\n    storedList[index].priority = priority;\n    this.setState({\n      tdList: storedList\n    })\n    localStorage.setItem(\"storedList\", JSON.stringify(storedList));\n  }\n\n  // changing the active filter\n  sort = filter => {\n    \n    // data needed to show sorted list depending on the pagination that it's in use\n    const indexOfLast = this.paginationRef.current.state.currentPage * this.paginationRef.current.state.tasksPerPage;\n    const indexOfFirst = indexOfLast - this.paginationRef.current.state.tasksPerPage;\n\n    // switch for maintaining the code easier\n    switch (filter) {\n      case \"az\":\n        this.setState({\n          filter: {\n            azFilter: true,\n            zaFilter: false,\n            ascentPriority: false,\n            descentPriority: false,\n            checked: false,\n            notChecked: false\n          }\n        }, () => {\n          // after updating state with new filter invoke changeView function to show list according to pagination\n          this.changeView(this.state.tdList.slice(indexOfFirst, indexOfLast));\n        });\n      break;\n      case \"za\":\n        this.setState({\n          filter: {\n            azFilter: false,\n            zaFilter: true,\n            ascentPriority: false,\n            descentPriority: false,\n            checked: false,\n            notChecked: false\n          }\n        }, () => {\n          this.changeView(this.state.tdList.slice(indexOfFirst, indexOfLast));\n        });\n      break;\n      case \"ascent\":\n        this.setState({\n          filter: {\n            azFilter: false,\n            zaFilter: false,\n            ascentPriority: true,\n            descentPriority: false,\n            checked: false,\n            notChecked: false\n          }\n        }, () => {\n          this.changeView(this.state.tdList.slice(indexOfFirst, indexOfLast));\n        });\n      break;\n      case \"descent\":\n        this.setState({\n          filter: {\n            azFilter: false,\n            zaFilter: false,\n            ascentPriority: false,\n            descentPriority: true,\n            checked: false,\n            notChecked: false\n          }\n        }, () => {\n          this.changeView(this.state.tdList.slice(indexOfFirst, indexOfLast));\n        });\n      break;\n      case \"checked\":\n        this.setState({\n          filter: {\n            azFilter: false,\n            zaFilter: false,\n            ascentPriority: false,\n            descentPriority: false,\n            checked: true,\n            notChecked: false\n          }\n        }, () => {\n          this.changeView(this.state.tdList.slice(indexOfFirst, indexOfLast));\n        });\n      break;\n      case \"notChecked\":\n        this.setState({\n          filter: {\n            azFilter: false,\n            zaFilter: false,\n            ascentPriority: false,\n            descentPriority: false,\n            checked: false,\n            notChecked: true\n          }\n        }, () => {\n          this.changeView(this.state.tdList.slice(indexOfFirst, indexOfLast));\n        });\n      break;\n      default:\n        this.setState({\n          filter: {\n            azFilter: false,\n            zaFilter: false,\n            ascentPriority: false,\n            descentPriority: false,\n            checked: false,\n            notChecked: false\n          }\n        }, () => {\n          this.changeView(this.state.tdList.slice(indexOfFirst, indexOfLast));\n        });\n    }\n  }\n\n  // changing the view depending on current pagination\n  changeView = viewedTasks => {\n    this.setState({\n      viewedTDList: viewedTasks\n    })\n  }\n\n  render() {\n    const {tdList, filter, viewedTDList} = this.state;\n\n    // sorting the task list depending on the active filter and updating the local storage\n    if (filter.azFilter) {\n      tdList.sort((a, b) => {\n        const nameA = a.text;\n        const nameB = b.text;\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        return 0;\n      });\n      localStorage.setItem(\"storedList\", JSON.stringify(tdList));\n    }\n\n    if (filter.zaFilter) {\n      tdList.sort((a, b) => {\n        const nameA = a.text;\n        const nameB = b.text;\n        if (nameA > nameB) {\n          return -1;\n        }\n        if (nameA < nameB) {\n          return 1;\n        }\n        return 0;\n      });\n      localStorage.setItem(\"storedList\", JSON.stringify(tdList));\n    }\n\n    if (filter.ascentPriority) {\n      const priorities = {\n        \"High\": 0,\n        \"Medium\": 1,\n        \"Low\": 2\n      };\n\n      tdList.sort((a, b) => {\n        const priorityA = priorities[a.priority];\n        const priorityB = priorities[b.priority];\n        if (priorityA > priorityB) {\n          return -1;\n        }\n        if (priorityA < priorityB) {\n          return 1;\n        }\n        return 0;\n      });\n      localStorage.setItem(\"storedList\", JSON.stringify(tdList));\n    }\n\n    if (filter.descentPriority) {\n      const priorities = {\n        \"High\": 0,\n        \"Medium\": 1,\n        \"Low\": 2\n      };\n\n      tdList.sort((a, b) => {\n        const priorityA = priorities[a.priority];\n        const priorityB = priorities[b.priority];\n        if (priorityA < priorityB) {\n          return -1;\n        }\n        if (priorityA > priorityB) {\n          return 1;\n        }\n        return 0;\n      });\n      localStorage.setItem(\"storedList\", JSON.stringify(tdList));\n    }\n\n    if (filter.checked) {\n      const priorities = {\n        true: 0,\n        false: 1\n      };\n\n      tdList.sort((a, b) => {\n        const priorityA = priorities[a.isFinished];\n        const priorityB = priorities[b.isFinished];\n        if (priorityA < priorityB) {\n          return -1;\n        }\n        if (priorityA > priorityB) {\n          return 1;\n        }\n        return 0;\n      });\n      localStorage.setItem(\"storedList\", JSON.stringify(tdList));\n    }\n\n    if (filter.notChecked) {\n      const priorities = {\n        true: 0,\n        false: 1\n      };\n\n      tdList.sort((a, b) => {\n        const priorityA = priorities[a.isFinished];\n        const priorityB = priorities[b.isFinished];\n        if (priorityA > priorityB) {\n          return -1;\n        }\n        if (priorityA < priorityB) {\n          return 1;\n        }\n        return 0;\n      });\n      localStorage.setItem(\"storedList\", JSON.stringify(tdList));\n    }\n\n    return (\n      <>\n        <section className={\"row row__tdList\"}>\n          <ul className={\"tdList\"}>\n            <TDHeader handleAtParentSort={this.sort} activeFilter={filter}/>\n            {\n              viewedTDList.map((task,index) => {\n                return (\n                  <TDElement  key={index} \n                              task={task} \n                              index={index} \n                              handleAtParentDelete={index => this.deleteTask(index)} \n                              handleAtParentIsFinished={(index, boolean) => this.toggleFinishTask(index, boolean)} \n                              handleAtParentPriority={(index, priority) => this.changePriority(index, priority)}\n                  />\n                )\n              })\n            }\n            <TDPagination tdList={tdList} handleAtParent={viewedTasks => this.changeView(viewedTasks)} ref={this.paginationRef}/>\n          </ul>\n        </section>\n      </>\n    )\n  }\n}\n\nexport default ToDoList;","import React, {Component} from 'react';\n\nimport './Footer.scss';\n\nimport {Link} from 'react-scroll';\nimport {Button} from '@material-ui/core'\n\n\nclass Footer extends Component {\n\n  render() {\n    return (\n      <>\n        <footer className={\"container\"}>\n          <section className={\"row\"}>\n            <p className={\"col-11 footer__text\"}>Designed by <a href={\"https://github.com/ArturDziadosz\"} target={\"_blank\"}\n               rel={\"noopener noreferrer\"}>Artur Dziadosz</a></p>\n            <Link to={\"header\"} smooth={true} duration={500}>\n              <Button className={\"col-1\"}>\n                <i className=\"fas fa-level-up-alt\"/>\n              </Button>\n            </Link>\n          </section>\n        </footer>\n      </>\n    )\n  }\n}\n\nexport default Footer;","import React, {Component} from 'react';\nimport './App.scss';\n\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport ToDoList from './components/ToDoList';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      newlyAddedTask: {\n        inputValue: \"\",\n        priority: \"\"\n      }\n    }\n  }\n\n  // passing values from Form to ToDoList with clearing the state to be able to add the same value task\n  newlyAddedTask = (inputValue, priority) => {\n    this.setState({\n      newlyAddedTask: {\n        inputValue: inputValue,\n        priority: priority\n      }\n    }, () => {\n      this.setState({\n        newlyAddedTask: {\n          inputValue: \"\"\n        }\n      })\n    })\n  }\n\n  render () {\n\n    return (\n      <>\n        <Header />\n        <main className={\"container\"}>\n          <Form handleAtParent={(inputValue, priority) => this.newlyAddedTask(inputValue, priority)}/>\n          <ToDoList newlyAddedTask={this.state.newlyAddedTask}/>\n        </main>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}